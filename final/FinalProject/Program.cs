using System;

class Program
{
    static void Main(string[] args)
    {
        Console.Clear();
        Run();
    }

    static private List<Alarm> _alarms= new List<Alarm>();
    
    static private void DisplayClock()
    {
        Console.Clear();
        Console.WriteLine("Press 'Q' to return to the menu.\n");

        while (true)
        {
            string currentTime = DateTime.Now.ToString("HH:mm:ss");

            Console.SetCursorPosition(0, 2);
            Console.WriteLine(DisplayASCIIClock(currentTime));

            if (Console.KeyAvailable)
            {
                ConsoleKeyInfo keyInfo = Console.ReadKey(intercept: true);
                if (keyInfo.Key == ConsoleKey.Q)
                {
                    break;
                }
            }

            System.Threading.Thread.Sleep(1000);
        }
    }

    static private string DisplayASCIIClock(string time)
    {
        // Generated by ChatGPT4.0
        var largeNumbers = new Dictionary<char, string[]>
        {
            ['0'] = new[] { " ███ ", "█   █", "█   █", "█   █", " ███ " },
            ['1'] = new[] { "  █  ", " ██  ", "  █  ", "  █  ", " ███ " },
            ['2'] = new[] { " ███ ", "█   █", "   █ ", "  █  ", "█████" },
            ['3'] = new[] { " ███ ", "█   █", "   █ ", "█   █", " ███ " },
            ['4'] = new[] { "   █ ", "  ██ ", " █ █ ", "█████", "   █ " },
            ['5'] = new[] { "█████", "█    ", "████ ", "    █", "████ " },
            ['6'] = new[] { " ███ ", "█    ", "████ ", "█   █", " ███ " },
            ['7'] = new[] { "█████", "    █", "   █ ", "  █  ", " █   " },
            ['8'] = new[] { " ███ ", "█   █", " ███ ", "█   █", " ███ " },
            ['9'] = new[] { " ███ ", "█   █", " ████", "    █", " ███ " },
            [':'] = new[] { "     ", "  █  ", "     ", "  █  ", "     " }
        };

        string[] output = new string[5];
        foreach (char c in time)
        {
            for (int i = 0; i < 5; i++)
            {
                output[i] += largeNumbers[c][i] + "  ";
            }
        }

        return string.Join('\n', output);
    }

    static private void CheckAlarmTimes(List<Alarm> alarms) {}

    static private void Run() {
        string selectedOption;

        while (true)
        {
            Console.Clear();
            Console.Write("Menu Options:\n"
                + "  1. Display Clock\n"
                + "  2. Create New Alarm\n"
                + "  3. List Alarms\n"
                + "  4. Quit\n"
                + "Select a choice from the menu: ");

            selectedOption = Console.ReadLine();

            switch (selectedOption)
            {
                case "1":
                    DisplayClock();
                    break;
                case "2":
                    SelectAlarm();
                    break;
                case "3":
                    ListAlarms();
                    break;
                case "4":
                    Console.Clear();
                    return;
            }
        }
    }

    private static void SelectAlarm()
    {
        Console.Clear();
        Console.Write("The types of Alarms are:\n"
            + "  1. Basic Alarm\n"
            + "  2. Timed Alarm\n"
            + "  3. Math Alarm\n"
            + "  4. Repeating Alarm\n"
            + "  5. Music Alarm\n"
            + "  6. Video Alarm\n"
            + "What type of goal would you like to set? ");

        string selectedOption = Console.ReadLine();
        switch (selectedOption)
        {
            case "1":
            BasicAlarm basicAlarm = new BasicAlarm(TimeSpan.Zero);
            basicAlarm.SetNewAlarm();
            _alarms.Add(basicAlarm);
                break;
            case "2":
            TimedAlarm timedAlarm  = new TimedAlarm(TimeSpan.Zero);
            timedAlarm.SetNewAlarm();
            _alarms.Add(timedAlarm);
                break;            
            case "3":
            MathAlarm mathAlarm = new MathAlarm(TimeSpan.Zero);
            mathAlarm.SetNewAlarm();
            _alarms.Add(mathAlarm);
                break;            
            case "4":
            RepeatingAlarm repeatingAlarm  = new RepeatingAlarm(TimeSpan.Zero);
            repeatingAlarm.SetNewAlarm();
            _alarms.Add(repeatingAlarm);
                break;            
            case "5":
            MusicAlarm musicAlarm = new MusicAlarm(TimeSpan.Zero);
            musicAlarm.SetNewAlarm();
            _alarms.Add(musicAlarm);
                break;            
            case "6":
            VideoAlarm videoAlarm = new VideoAlarm(TimeSpan.Zero);
            videoAlarm.SetNewAlarm();
            _alarms.Add(videoAlarm);
                break;
            default:
                Console.WriteLine("Invalid option.");
                break;
        }
    }
    

    static private void ListAlarms()
    {
        Console.Clear();
        if (_alarms.Count == 0) {
            Console.WriteLine("No alarms to display.");
        } else {
            Console.WriteLine("Your alarms are:");
            int alarmNumber = 0;
            foreach (Alarm alarm in _alarms){
                alarmNumber++;
                Console.WriteLine($"{alarmNumber}. {alarm.GetAlarmData()}");
            }
        }
        Console.Write("\nPress enter to continue ");
        Console.ReadLine();
    }

}